<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:flexnodal="com.github.ciacob.flexnodal.*"
	xmlns:components="com.github.ciacob.flexnodal.components.*">

	<fx:Declarations>

		<!-- Tab data provider -->
		<s:ArrayCollection id="chartModes">
			<fx:Object label="Normal" data="{Nodal.NORMAL}"/>
			<fx:Object label="Exclusive" data="{Nodal.EXCLUSIVE}"/>
			<fx:Object label="Isolated" data="{Nodal.ISOLATED}"/>
		</s:ArrayCollection>
	</fx:Declarations>

	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		global {
			font-size: 15;
		}

		s|WindowedApplication {
			chromeColor: #444444;
			backgroundColor: #444444;
			color: #ffffff;
		}

		s|NumericStepper,
		s|ComboBox {
			borderColor: #000000;
			contentBackgroundColor: #141414;
		}

		s|NumericStepper  {
			paddingLeft: 5;
		}

		s|List {
			contentBackgroundColor: #303030;
			alternatingItemColors: #303030;
			rollOverColor: #2a57dd; 
			selectionColor: #007994;
		}

		.myChartStyle {
			padding: 15;

			lineThickness: 4;
			lineColor: #3c0097;
			lineColorOver: #6637ad;
			lineColorSelected: #934bff;
			lineColorAnchor: #301b4f;
			defaultAlpha : 0.5;

			layerColor: #9794a1;
			chartBg: #f6e2f9;
			chartBgAlpha: 1;

			xAxisColor: #3a0256;
			yAxisColor: #003e6e;
			xAxisAlpha: 1;
			yAxisAlpha: 1;
		}

		.selectionPanelStyle {
			verticalGap: 10;
			horizontalGap: 10;
			padding: 5;
			rowHeight: 25;
			minHeight: 105;
			headerStyle: mySelHeaderStyle;
			bodyStyle: mySelBodyStyle;
			buttonStyle: mySelButtonStyle;
		}

		.mySelHeaderStyle {
			color: #bfabca;
		}

		.mySelBodyStyle {
			color: #e4e4e4;
		}

		.mySelButtonStyle {
			color: #c6c6c6;
		}
	</fx:Style>

	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import spark.events.IndexChangeEvent;
			import com.github.ciacob.flexnodal.events.NodalEvent;
			import com.github.ciacob.flexnodal.Nodal;

			// Flags to raise when the active chart has selection.
			[Bindable]
			private var _haveSelection:Boolean;
			
			// Sample charts to edit.
			private const dp:ArrayCollection = new ArrayCollection([
						{
							name: "Blue",
							values: [[0, 0.1], [0.5, 0.8], [0.95, 0], [1, 0]]
						},
						{
							name: "Red",
							values: [[0, 0], [1, 1]]
						},
						{
							name: "Green",
							values: [[0, 1], [1, 0]]
						}
					]);
			
			// Grid cells to display underneath the charts.
			private const gridDp:ArrayCollection = new ArrayCollection([
						{axis: 'x', stop: 0.1, label: '10'},
						{axis: 'x', stop: 0.2, label: '20'},
						{axis: 'x', stop: 0.3, label: '30'},
						{axis: 'x', stop: 0.4, label: '40'},
						{axis: 'x', stop: 0.5, label: '50'},
						{axis: 'x', stop: 0.6, label: '60'},
						{axis: 'x', stop: 0.7, label: '70'},
						{axis: 'x', stop: 0.8, label: '80'},
						{axis: 'x', stop: 0.9, label: '90'},
						{axis: 'y', stop: 0.1, label: '10'},
						{axis: 'y', stop: 0.2, label: '20'},
						{axis: 'y', stop: 0.3, label: '30'},
						{axis: 'y', stop: 0.4, label: '40'},
						{axis: 'y', stop: 0.5, label: '50'},
						{axis: 'y', stop: 0.6, label: '60'},
						{axis: 'y', stop: 0.7, label: '70'},
						{axis: 'y', stop: 0.8, label: '80'},
						{axis: 'y', stop: 0.9, label: '90'},
					]);
			
			/**
			 * Removes active chart's selection.
			 */
			private function _clearSelection():void {
				if (!_haveSelection) {
					return;
				}
				nodalEditor.clearSelection();
			}
			
			/**
			 * Deletes active chart's selection.
			 */
			private function _deleteSelection():void {
				if (!_haveSelection) {
					return;
				}
				nodalEditor.deleteSelection();
			}
			
			/**
			 * Listener. Executes when the "charts list" combo box is changed.
			 */
			private function _onActiveChartChanged(event:IndexChangeEvent):void {
				if (!event || event.newIndex < 0 || event.newIndex > dp.length) {
					return;
				}
				const dpItem:Object = dp.getItemAt(event.newIndex);
				nodalEditor.activeChartItem = dpItem;
			}
			
			/**
			 * Executed when user clicks on one of the tabs.
			 */
			private function _onModeChanged(event:IndexChangeEvent):void {
				if (!event || event.newIndex < 0 || event.newIndex > chartModes.length) {
					return;
				}
				nodalEditor.operatingMode = chartModes[event.newIndex].data;
			}
			
			/**
			 * Executed when user has activated a specific chart by clicking
			 * on its line.
			 */
			private function _onChartActivated(event:NodalEvent):void {
				const chartDp:Object = event.payload;
				chartsList.selectedItem = chartDp;
			
				if (chartDp && selectionPanel) {
					selectionPanel.chartName = chartDp.name || '';
				}
			}
			
			/**
			 * Executed when user has changed the values of the active chart by
			 * adding, deleting or moving nodes.
			 */
			private function _onChartDataChanged(event:NodalEvent):void {
				trace(event, JSON.stringify(event.payload));
			}
			
			/**
			 * Executed when user has caused the selection of the active chart to
			 * change.
			 */
			private function _onSelectionChanged(event:NodalEvent):void {
				if (!event) {
					return;
				}
				selectionPanel.dataProvider = event.payload;
			}
			
			/**
			 * Executed when user has modified the value of one or more selected nodes
			 * by means of the selection panel.
			 */
			private function _onSelectionPatch(event:NodalEvent):void {
				if (!event || !event.payload) {
					return;
				}
				nodalEditor.patchSelection(event.payload);
			}
		]]>
	</fx:Script>

	<s:VGroup padding="25" width="100%" height="100%"
		horizontalAlign="justify">

		<!-- Controls bar -->
		<s:HGroup id="controls">

			<!-- List of available charts. Sets and reflects the active chart. -->
			<s:Group width="100%">
				<s:ComboBox
					id="chartsList"
					dataProvider="{dp}" labelField="name"
					change="{_onActiveChartChanged(event)}"/>
			</s:Group>

			<!-- Selection-related UI -->
			<s:HGroup horizontalAlign="center" width="100%">
				<s:Button label="Clear selection"
					enabled="{_haveSelection}"
					click="{_clearSelection()}"/>

				<s:Button label="Delete selection"
					enabled="{_haveSelection}"
					click="{_deleteSelection()}"/>
			</s:HGroup>

			<!-- Editing mode for current chart -->
			<s:Group width="100%">
				<s:ButtonBar id="modeButtons"
					selectedIndex="0"
					dataProvider="{chartModes}"
					change="_onModeChanged(event)"
					right="0"/>
			</s:Group>

		</s:HGroup>

		<!-- Nodal component (charts editor) -->
		<flexnodal:Nodal
			id="nodalEditor"
			height="100%"
			dataProvider="{dp}"
			gridDataProvider="{gridDp}"
			chartStyle="myChartStyle"
			selectionChange="_onSelectionChanged (event)"
			chartDataChange="_onChartDataChanged (event)"
			chartActivation="_onChartActivated (event)"/>

		<!-- Selection panel, for monitoring and adjusting selected nodes' value -->
		<s:VGroup horizontalAlign="center">
			<components:SelectionPanel
				id="selectionPanel"
				styleName="selectionPanelStyle"
				selectionPatch="_onSelectionPatch (event)"/>
		</s:VGroup>

	</s:VGroup>
</s:WindowedApplication>
